/// <reference types="node" />
import { CallOptions, ChannelCredentials, Client, ClientOptions, ClientReadableStream, ClientUnaryCall, handleServerStreamingCall, handleUnaryCall, Metadata, ServiceError, UntypedServiceImplementation } from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";
import { Empty } from "../../../google/protobuf/empty";
/** Generated by sylk.build, DO NOT EDIT. */
/** [sylklabs.iot.v1.PublishRequest] - */
export interface PublishRequest {
    /** [sylklabs.iot.v1.PublishRequest.topic] - */
    topic: string;
    /** [sylklabs.iot.v1.PublishRequest.data] - */
    data?: SensorData | undefined;
}
/** [sylklabs.iot.v1.Topic] - The Topic message represents the topic to which the IoT server and Grafana plugin will subscribe and publish. It will have a single field called name, which is a string representing the name of the topic. */
export interface Topic {
    /** [sylklabs.iot.v1.Topic.name] - */
    name: string;
}
/** [sylklabs.iot.v1.SensorData] - */
export interface SensorData {
    /** [sylklabs.iot.v1.SensorData.sensor_id] - */
    sensorId: string;
    /** [sylklabs.iot.v1.SensorData.value] - */
    value: number;
    /** [sylklabs.iot.v1.SensorData.timestamp] - */
    timestamp?: Date | undefined;
}
export declare const PublishRequest: {
    encode(message: PublishRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PublishRequest;
    fromJSON(object: any): PublishRequest;
    toJSON(message: PublishRequest): unknown;
    create<I extends {
        topic?: string | undefined;
        data?: {
            sensorId?: string | undefined;
            value?: number | undefined;
            timestamp?: Date | undefined;
        } | undefined;
    } & {
        topic?: string | undefined;
        data?: ({
            sensorId?: string | undefined;
            value?: number | undefined;
            timestamp?: Date | undefined;
        } & {
            sensorId?: string | undefined;
            value?: number | undefined;
            timestamp?: Date | undefined;
        } & { [K in Exclude<keyof I["data"], keyof SensorData>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof PublishRequest>]: never; }>(base?: I | undefined): PublishRequest;
    fromPartial<I_1 extends {
        topic?: string | undefined;
        data?: {
            sensorId?: string | undefined;
            value?: number | undefined;
            timestamp?: Date | undefined;
        } | undefined;
    } & {
        topic?: string | undefined;
        data?: ({
            sensorId?: string | undefined;
            value?: number | undefined;
            timestamp?: Date | undefined;
        } & {
            sensorId?: string | undefined;
            value?: number | undefined;
            timestamp?: Date | undefined;
        } & { [K_2 in Exclude<keyof I_1["data"], keyof SensorData>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof PublishRequest>]: never; }>(object: I_1): PublishRequest;
};
export declare const Topic: {
    encode(message: Topic, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Topic;
    fromJSON(object: any): Topic;
    toJSON(message: Topic): unknown;
    create<I extends {
        name?: string | undefined;
    } & {
        name?: string | undefined;
    } & { [K in Exclude<keyof I, "name">]: never; }>(base?: I | undefined): Topic;
    fromPartial<I_1 extends {
        name?: string | undefined;
    } & {
        name?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, "name">]: never; }>(object: I_1): Topic;
};
export declare const SensorData: {
    encode(message: SensorData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SensorData;
    fromJSON(object: any): SensorData;
    toJSON(message: SensorData): unknown;
    create<I extends {
        sensorId?: string | undefined;
        value?: number | undefined;
        timestamp?: Date | undefined;
    } & {
        sensorId?: string | undefined;
        value?: number | undefined;
        timestamp?: Date | undefined;
    } & { [K in Exclude<keyof I, keyof SensorData>]: never; }>(base?: I | undefined): SensorData;
    fromPartial<I_1 extends {
        sensorId?: string | undefined;
        value?: number | undefined;
        timestamp?: Date | undefined;
    } & {
        sensorId?: string | undefined;
        value?: number | undefined;
        timestamp?: Date | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof SensorData>]: never; }>(object: I_1): SensorData;
};
export declare type IotServiceService = typeof IotServiceService;
export declare const IotServiceService: {
    /** [sylklabs.iot.v1.IotService.Subscribe] - */
    readonly subscribe: {
        readonly path: "/sylklabs.iot.v1.IotService/Subscribe";
        readonly requestStream: false;
        readonly responseStream: true;
        readonly requestSerialize: (value: Topic) => Buffer;
        readonly requestDeserialize: (value: Buffer) => Topic;
        readonly responseSerialize: (value: SensorData) => Buffer;
        readonly responseDeserialize: (value: Buffer) => SensorData;
    };
    /** [sylklabs.iot.v1.IotService.Publish] - */
    readonly publish: {
        readonly path: "/sylklabs.iot.v1.IotService/Publish";
        readonly requestStream: false;
        readonly responseStream: false;
        readonly requestSerialize: (value: PublishRequest) => Buffer;
        readonly requestDeserialize: (value: Buffer) => PublishRequest;
        readonly responseSerialize: (value: Empty) => Buffer;
        readonly responseDeserialize: (value: Buffer) => Empty;
    };
};
export interface IotServiceServer extends UntypedServiceImplementation {
    /** [sylklabs.iot.v1.IotService.Subscribe] - */
    subscribe: handleServerStreamingCall<Topic, SensorData>;
    /** [sylklabs.iot.v1.IotService.Publish] - */
    publish: handleUnaryCall<PublishRequest, Empty>;
}
export interface IotServiceClient extends Client {
    /** [sylklabs.iot.v1.IotService.Subscribe] - */
    subscribe(request: Topic, options?: Partial<CallOptions>): ClientReadableStream<SensorData>;
    subscribe(request: Topic, metadata?: Metadata, options?: Partial<CallOptions>): ClientReadableStream<SensorData>;
    /** [sylklabs.iot.v1.IotService.Publish] - */
    publish(request: PublishRequest, callback: (error: ServiceError | null, response: Empty) => void): ClientUnaryCall;
    publish(request: PublishRequest, metadata: Metadata, callback: (error: ServiceError | null, response: Empty) => void): ClientUnaryCall;
    publish(request: PublishRequest, metadata: Metadata, options: Partial<CallOptions>, callback: (error: ServiceError | null, response: Empty) => void): ClientUnaryCall;
}
export declare const IotServiceClient: {
    new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions> | undefined): IotServiceClient;
    service: typeof IotServiceService;
};
