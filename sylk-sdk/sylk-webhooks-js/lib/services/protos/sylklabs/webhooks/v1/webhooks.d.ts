/// <reference types="node" />
import { CallOptions, ChannelCredentials, Client, ClientOptions, ClientUnaryCall, handleUnaryCall, Metadata, ServiceError, UntypedServiceImplementation } from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";
import { Empty } from "../../../google/protobuf/empty";
/** Generated by sylk.build, DO NOT EDIT. */
/** [sylklabs.webhooks.v1.Payload] - */
export interface Payload {
    /** [sylklabs.webhooks.v1.Payload.data] - */
    data?: {
        [key: string]: any;
    } | undefined;
}
export declare const Payload: {
    encode(message: Payload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Payload;
    fromJSON(object: any): Payload;
    toJSON(message: Payload): unknown;
    create<I extends {
        data?: {
            [x: string]: any;
        } | undefined;
    } & {
        data?: ({
            [x: string]: any;
        } & {
            [x: string]: any;
        } & { [K in Exclude<keyof I["data"], string | number>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "data">]: never; }>(base?: I | undefined): Payload;
    fromPartial<I_1 extends {
        data?: {
            [x: string]: any;
        } | undefined;
    } & {
        data?: ({
            [x: string]: any;
        } & {
            [x: string]: any;
        } & { [K_2 in Exclude<keyof I_1["data"], string | number>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, "data">]: never; }>(object: I_1): Payload;
};
export declare type WebhookServiceService = typeof WebhookServiceService;
export declare const WebhookServiceService: {
    /** [webhooks.v1.WebhookService.Webhook] - */
    readonly webhook: {
        readonly path: "/sylklabs.webhooks.v1.WebhookService/Webhook";
        readonly requestStream: false;
        readonly responseStream: false;
        readonly requestSerialize: (value: Payload) => Buffer;
        readonly requestDeserialize: (value: Buffer) => Payload;
        readonly responseSerialize: (value: Empty) => Buffer;
        readonly responseDeserialize: (value: Buffer) => Empty;
    };
};
export interface WebhookServiceServer extends UntypedServiceImplementation {
    /** [webhooks.v1.WebhookService.Webhook] - */
    webhook: handleUnaryCall<Payload, Empty>;
}
export interface WebhookServiceClient extends Client {
    /** [webhooks.v1.WebhookService.Webhook] - */
    webhook(request: Payload, callback: (error: ServiceError | null, response: Empty) => void): ClientUnaryCall;
    webhook(request: Payload, metadata: Metadata, callback: (error: ServiceError | null, response: Empty) => void): ClientUnaryCall;
    webhook(request: Payload, metadata: Metadata, options: Partial<CallOptions>, callback: (error: ServiceError | null, response: Empty) => void): ClientUnaryCall;
}
export declare const WebhookServiceClient: {
    new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions> | undefined): WebhookServiceClient;
    service: typeof WebhookServiceService;
};
