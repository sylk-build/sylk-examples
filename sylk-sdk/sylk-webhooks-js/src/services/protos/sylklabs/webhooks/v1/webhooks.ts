/* eslint-disable */
import {
  CallOptions,
  ChannelCredentials,
  Client,
  ClientOptions,
  ClientUnaryCall,
  handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  ServiceError,
  UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";
import { Empty } from "../../../google/protobuf/empty";
import { Struct } from "../../../google/protobuf/struct";

/** Generated by sylk.build, DO NOT EDIT. */

/** [sylklabs.webhooks.v1.Payload] - */
export interface Payload {
  /** [sylklabs.webhooks.v1.Payload.data] - */
  data?: { [key: string]: any } | undefined;
}

function createBasePayload(): Payload {
  return { data: undefined };
}

export const Payload = {
  encode(message: Payload, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== undefined) {
      Struct.encode(Struct.wrap(message.data), writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Payload {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Payload {
    return { data: isObject(object.data) ? object.data : undefined };
  },

  toJSON(message: Payload): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = message.data;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Payload>, I>>(base?: I): Payload {
    return Payload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Payload>, I>>(object: I): Payload {
    const message = createBasePayload();
    message.data = object.data ?? undefined;
    return message;
  },
};

export type WebhookServiceService = typeof WebhookServiceService;
export const WebhookServiceService = {
  /** [webhooks.v1.WebhookService.Webhook] - */
  webhook: {
    path: "/sylklabs.webhooks.v1.WebhookService/Webhook",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Payload) => Buffer.from(Payload.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Payload.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
} as const;

export interface WebhookServiceServer extends UntypedServiceImplementation {
  /** [webhooks.v1.WebhookService.Webhook] - */
  webhook: handleUnaryCall<Payload, Empty>;
}

export interface WebhookServiceClient extends Client {
  /** [webhooks.v1.WebhookService.Webhook] - */
  webhook(request: Payload, callback: (error: ServiceError | null, response: Empty) => void): ClientUnaryCall;
  webhook(
    request: Payload,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  webhook(
    request: Payload,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
}

export const WebhookServiceClient = makeGenericClientConstructor(
  WebhookServiceService,
  "sylklabs.webhooks.v1.WebhookService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): WebhookServiceClient;
  service: typeof WebhookServiceService;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}
