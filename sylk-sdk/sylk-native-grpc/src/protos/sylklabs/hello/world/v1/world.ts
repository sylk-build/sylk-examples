/* eslint-disable */
import {
  CallOptions,
  ChannelCredentials,
  Client,
  ClientDuplexStream,
  ClientOptions,
  ClientReadableStream,
  ClientUnaryCall,
  ClientWritableStream,
  handleBidiStreamingCall,
  handleClientStreamingCall,
  handleServerStreamingCall,
  handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  ServiceError,
  UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";

/** Generated by sylk.build, DO NOT EDIT. */

/** [sylklabs.hello.world.v1.Hello] - */
export interface Hello {
  /** [sylklabs.hello.world.v1.Hello.text] - */
  text: string;
}

function createBaseHello(): Hello {
  return { text: "" };
}

export const Hello = {
  encode(message: Hello, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Hello {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHello();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Hello {
    return { text: isSet(object.text) ? String(object.text) : "" };
  },

  toJSON(message: Hello): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Hello>, I>>(base?: I): Hello {
    return Hello.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Hello>, I>>(object: I): Hello {
    const message = createBaseHello();
    message.text = object.text ?? "";
    return message;
  },
};

export type HelloWorldServiceService = typeof HelloWorldServiceService;
export const HelloWorldServiceService = {
  /** [hello.world.v1.HelloWorldService.Hello] - */
  hello: {
    path: "/sylklabs.hello.world.v1.HelloWorldService/Hello",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Hello) => Buffer.from(Hello.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Hello.decode(value),
    responseSerialize: (value: Hello) => Buffer.from(Hello.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Hello.decode(value),
  },
  /** [StreamHello] - */
  streamHello: {
    path: "/sylklabs.hello.world.v1.HelloWorldService/StreamHello",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: Hello) => Buffer.from(Hello.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Hello.decode(value),
    responseSerialize: (value: Hello) => Buffer.from(Hello.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Hello.decode(value),
  },
  /** [clientStream] - */
  clientStream: {
    path: "/sylklabs.hello.world.v1.HelloWorldService/clientStream",
    requestStream: true,
    responseStream: false,
    requestSerialize: (value: Hello) => Buffer.from(Hello.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Hello.decode(value),
    responseSerialize: (value: Hello) => Buffer.from(Hello.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Hello.decode(value),
  },
  /** [bidiStream] - */
  bidiStream: {
    path: "/sylklabs.hello.world.v1.HelloWorldService/bidiStream",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: Hello) => Buffer.from(Hello.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Hello.decode(value),
    responseSerialize: (value: Hello) => Buffer.from(Hello.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Hello.decode(value),
  },
} as const;

export interface HelloWorldServiceServer extends UntypedServiceImplementation {
  /** [hello.world.v1.HelloWorldService.Hello] - */
  hello: handleUnaryCall<Hello, Hello>;
  /** [StreamHello] - */
  streamHello: handleServerStreamingCall<Hello, Hello>;
  /** [clientStream] - */
  clientStream: handleClientStreamingCall<Hello, Hello>;
  /** [bidiStream] - */
  bidiStream: handleBidiStreamingCall<Hello, Hello>;
}

export interface HelloWorldServiceClient extends Client {
  /** [hello.world.v1.HelloWorldService.Hello] - */
  hello(request: Hello, callback: (error: ServiceError | null, response: Hello) => void): ClientUnaryCall;
  hello(
    request: Hello,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Hello) => void,
  ): ClientUnaryCall;
  hello(
    request: Hello,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Hello) => void,
  ): ClientUnaryCall;
  /** [StreamHello] - */
  streamHello(request: Hello, options?: Partial<CallOptions>): ClientReadableStream<Hello>;
  streamHello(request: Hello, metadata?: Metadata, options?: Partial<CallOptions>): ClientReadableStream<Hello>;
  /** [clientStream] - */
  clientStream(callback: (error: ServiceError | null, response: Hello) => void): ClientWritableStream<Hello>;
  clientStream(
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Hello) => void,
  ): ClientWritableStream<Hello>;
  clientStream(
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Hello) => void,
  ): ClientWritableStream<Hello>;
  clientStream(
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Hello) => void,
  ): ClientWritableStream<Hello>;
  /** [bidiStream] - */
  bidiStream(): ClientDuplexStream<Hello, Hello>;
  bidiStream(options: Partial<CallOptions>): ClientDuplexStream<Hello, Hello>;
  bidiStream(metadata: Metadata, options?: Partial<CallOptions>): ClientDuplexStream<Hello, Hello>;
}

export const HelloWorldServiceClient = makeGenericClientConstructor(
  HelloWorldServiceService,
  "sylklabs.hello.world.v1.HelloWorldService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): HelloWorldServiceClient;
  service: typeof HelloWorldServiceService;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
